// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;
    // static Array block;

    static int NEXT = 0;
    static int SIZE = 1;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[NEXT] = 0; // next
        let heap[SIZE]= 14355; // heap size
        let freeList = 2048;
        let freeList[NEXT] = 0;
        let freeList[SIZE] = 14355;
        // let block = 2048;
        // let block[NEXT] = 0;
        // let block[SIZE]=14355;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prev, current, next, blockSize;

        let current = freeList;
        let prev = 0;
        let next = freeList[NEXT];

        while(~(current == 0)){
            let blockSize = current[SIZE];
            let next = current[NEXT];
            if((size + 2) < (blockSize + 1)){
                if((size + 2) == blockSize){
                    // Perfect fit
                    if(prev == 0){
                        // Update the head
                        let freeList = next;
                    }else{
                        // Remove current from the list
                        let prev[NEXT] = next;
                    }
                    let current[0] = 0;
                    return current + 2; 
                }
                // Shrink the block to the correct size -> free space
                let current[SIZE] = blockSize - size;

                return current + 2 + current[SIZE] + 2;
            }
            // Set previous to current
            let prev = current;
            // Set current to next
            let current = next;
        }

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int baseAddress,current;
        
        let baseAddress = o - 2;
        
        let current = freeList;
        while(~(current == 0)){
            let current = current[NEXT];
        }

        // Set the block base address
        let current[NEXT] = baseAddress;
        // Set the block next block to 0
        let baseAddress[1]= 0;
    }    
}
