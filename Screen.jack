// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static boolean c;

    /** Initializes the Screen. */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;

        // Set default color to black
        let c = true;

        return;
    }

    

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;

        let address = 16384;

        while(address < 24576){
            do Memory.poke(address, 0);
            let address = address + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let c = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value,mask, bit;

        if((x  < 0) | (x > 511) | (y < 0) | (y > 255)){
            return;
        }

        let address = 16384 + (y * 32) + (x / 16);
        let value = Memory.peek(address);
        // Get which bit(pixel) of the address has to be changed
        let bit = x - ((x / 16) * 16);
        // Create a mask
        let mask = powersOfTwo[bit];
        // Set the pixel to 1(black)
        if(c){
            let value = value | mask;
        }else{
            let value = value & (~mask);
        }
        

        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff, i;
        var int newY, newX;

        // Vertical
        if(x1 = x2){
            let diff = Math.abs((y1 - y2));
            let i = 0;
            while(i < diff){
                if(y1 < y2){
                    do Screen.drawPixel(x1, y1 + i);
                }else{
                    do Screen.drawPixel(x1, y1 - i);
                }
                let i = i + 1;
            }
            return;
        }

        // Horizontal
        if(y1 = y2){
            let diff = Math.abs((x1 - x2));
            let i = 0;
            while(i < diff){
                if(x1 < x2){
                    do Screen.drawPixel(x1 + i, y1);
                }else{
                    do Screen.drawPixel(x1 - i, y1);
                }
                let i = i + 1;
            }
          return;
        }

        // Diagonal

        let x = x1;
        let y = y1;
        let dx = Math.abs((x2 - x1));
        let dy = Math.abs((y2 - y1));
        let a = 0;
        let b = 0;
        let diff = 0;

        // do Screen.drawLine(280,90,345,35);        // roof
        // do Screen.drawLine(345,35,410,90);        // roof

        while((a < (dx + 1)) & (b < (dy + 1))){
            if(y1 < y2){
                // Go down
                let newY = y + b;
            }else{
                // Go up
                let newY = y - b;
            }
            if(x1 < x2){
                // Go right
                let newX = x + a;
            }else{
                // Go left
                let newX = x - a;
            }
            do Screen.drawPixel(newX , newY);

            if(diff < 0){
                // Go right/left
                let a = a + 1;
                let diff = diff + dy;
            }else{
                // Go up/down
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int diff, i;

        if((y1 > y2) | (x1 > x2)){
            //TODO: error
            return;
        }

        let i = 0;
        let diff = y2 - y1;

        while(i < diff){
            do Screen.drawLine(x1, y2 - i, x2, y2 - i);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dl;

        if(r > 181){
            //TODO: error
            return;
        }

        let dy = -r;

        while(~(dy > r)){
            let dl = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dl, y + dy, x + dl , y + dy);
            // do Screen.drawPixel((x - dl), (y + dy));
            // do Screen.drawPixel((x + dl), (y + dy));
            let dy = dy + 1;
        }

        return;
    }
}
