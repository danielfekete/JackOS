// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int mLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 1){
            let maxLength = 1;   
        }
        let str = Array.new(maxLength);
        let mLength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length] = null;
        let length = length - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var int c;
        var int d;
        var boolean negative;

        let negative = false;
        let val = 0;
        let i = 0;
        let c = str[0];
        // negative number
        if(c = 45){
            let negative = true;
            let i = 1;
            let c = str[1];
        }
        while((c < 58) & (c > 47) & (i < length)){
            // integer value of char c
            let d = c - 48; 
            let val = (val * 10) + d;
            let i = i + 1;
            let c = str[i];
        }
        if(negative & (val > 0)){
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Reset this string
        do str.dispose();
        let str = Array.new(mLength);
        let length = 0;

        // Add sign if the number is negative
        if(val < 0){
            do appendChar(45);
        }
        let val = Math.abs(val);

        do int2String(val);
        return;
    }

    method char int2String(int val){
        var int lastDigit;
        var int c;

        let lastDigit = val - ((val / 10) * 10);
        // character of last digit, 0 -> 48
        let c = 48 + lastDigit;
        if(~(val < 10)){
            do int2String(val / 10);
        }

        do appendChar(c);
        
        return c;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
